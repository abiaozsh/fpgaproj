# 1 "blink.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "blink.cpp"
# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/io.h" 1 3
# 99 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/io.h" 3
# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/sfr_defs.h" 1 3
# 126 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/sfr_defs.h" 3
# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/inttypes.h" 1 3
# 37 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/inttypes.h" 3
# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/stdint.h" 1 3
# 121 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/stdint.h" 3
typedef int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 142 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/stdint.h" 3
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 159 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/stdint.h" 3
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 213 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/stdint.h" 3
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 273 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/stdint.h" 3
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 38 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/inttypes.h" 2 3
# 77 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 127 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/sfr_defs.h" 2 3
# 100 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/io.h" 2 3
# 236 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/io.h" 3
# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/iom8.h" 1 3
# 237 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/io.h" 2 3
# 334 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/io.h" 3
# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/portpins.h" 1 3
# 335 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/io.h" 2 3

# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/common.h" 1 3
# 337 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/io.h" 2 3

# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/version.h" 1 3
# 339 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/io.h" 2 3


# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/fuse.h" 1 3
# 243 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
} __fuse_t;
# 342 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/io.h" 2 3


# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/lock.h" 1 3
# 345 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/io.h" 2 3
# 2 "blink.cpp" 2
# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/pgmspace.h" 1 3
# 81 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/pgmspace.h" 3
# 1 "c:\\program files (x86)\\arduino\\hardware\\tools\\avr\\bin\\../lib/gcc/avr/4.3.2/include/stddef.h" 1 3 4
# 214 "c:\\program files (x86)\\arduino\\hardware\\tools\\avr\\bin\\../lib/gcc/avr/4.3.2/include/stddef.h" 3 4
typedef unsigned int size_t;
# 82 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/pgmspace.h" 2 3
# 106 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/pgmspace.h" 3
extern "C" {
# 211 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/pgmspace.h" 3
typedef void prog_void __attribute__((__progmem__));
typedef char prog_char __attribute__((__progmem__));
typedef unsigned char prog_uchar __attribute__((__progmem__));

typedef int8_t prog_int8_t __attribute__((__progmem__));
typedef uint8_t prog_uint8_t __attribute__((__progmem__));
typedef int16_t prog_int16_t __attribute__((__progmem__));
typedef uint16_t prog_uint16_t __attribute__((__progmem__));
typedef int32_t prog_int32_t __attribute__((__progmem__));
typedef uint32_t prog_uint32_t __attribute__((__progmem__));

typedef int64_t prog_int64_t __attribute__((__progmem__));
typedef uint64_t prog_uint64_t __attribute__((__progmem__));
# 744 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/pgmspace.h" 3
extern const prog_void * memchr_P(const prog_void *, int __val, size_t __len) __attribute__((__const__));
extern int memcmp_P(const void *, const prog_void *, size_t) __attribute__((__pure__));
extern void *memcpy_P(void *, const prog_void *, size_t);
extern void *memmem_P(const void *, size_t, const prog_void *, size_t) __attribute__((__pure__));
extern const prog_void * memrchr_P(const prog_void *, int __val, size_t __len) __attribute__((__const__));
extern char *strcat_P(char *, const prog_char *);
extern const prog_char * strchr_P(const prog_char *, int __val) __attribute__((__const__));
extern const prog_char * strchrnul_P(const prog_char *, int __val) __attribute__((__const__));
extern int strcmp_P(const char *, const prog_char *) __attribute__((__pure__));
extern char *strcpy_P(char *, const prog_char *);
extern int strcasecmp_P(const char *, const prog_char *) __attribute__((__pure__));
extern char *strcasestr_P(const char *, const prog_char *) __attribute__((__pure__));
extern size_t strcspn_P(const char *__s, const prog_char * __reject) __attribute__((__pure__));
extern size_t strlcat_P (char *, const prog_char *, size_t );
extern size_t strlcpy_P (char *, const prog_char *, size_t );
extern size_t strlen_P(const prog_char *) __attribute__((__const__));
extern size_t strnlen_P(const prog_char *, size_t) __attribute__((__const__));
extern int strncmp_P(const char *, const prog_char *, size_t) __attribute__((__pure__));
extern int strncasecmp_P(const char *, const prog_char *, size_t) __attribute__((__pure__));
extern char *strncat_P(char *, const prog_char *, size_t);
extern char *strncpy_P(char *, const prog_char *, size_t);
extern char *strpbrk_P(const char *__s, const prog_char * __accept) __attribute__((__pure__));
extern const prog_char * strrchr_P(const prog_char *, int __val) __attribute__((__const__));
extern char *strsep_P(char **__sp, const prog_char * __delim);
extern size_t strspn_P(const char *__s, const prog_char * __accept) __attribute__((__pure__));
extern char *strstr_P(const char *, const prog_char *) __attribute__((__pure__));


}
# 3 "blink.cpp" 2
# 1 "c:/program files (x86)/arduino/hardware/tools/avr/lib/gcc/../../avr/include/avr/interrupt.h" 1 3
# 4 "blink.cpp" 2
# 13 "blink.cpp"
void delay(uint16_t ticks)
{
  for(uint16_t i = 0 ; i < ticks; i++){
    (*(volatile uint8_t *)((0x32) + 0x20)) = 0;
    while((*(volatile uint8_t *)((0x32) + 0x20))<(80));
  }
}
# 51 "blink.cpp"
void SerialInit(){

 (*(volatile uint8_t *)((0x11) + 0x20)) |= (1 << (1));
 (*(volatile uint8_t *)((0x11) + 0x20)) &= ~(1 << (0));
 (*(volatile uint8_t *)((0x12) + 0x20)) |= (1 << (1));
}
void TimerInit()
{
# 67 "blink.cpp"
  (*(volatile uint8_t *)((0x33) + 0x20)) = 1;
}


void SerialSend(uint8_t val){

 (*(volatile uint8_t *)((0x33) + 0x20)) = 1;
 (*(volatile uint8_t *)((0x32) + 0x20)) = 0;
 (*(volatile uint8_t *)((0x12) + 0x20)) &= ~(1 << (1));
  while((*(volatile uint8_t *)((0x32) + 0x20))<63);(*(volatile uint8_t *)((0x32) + 0x20)) = 0;
 uint8_t chkbit = 0x01;
 for(uint8_t i = 8 ; i > 0 ; i--)
 {
  if(val&chkbit)
    {
      (*(volatile uint8_t *)((0x12) + 0x20)) |= (1 << (1));
    }else{
      (*(volatile uint8_t *)((0x12) + 0x20)) &= ~(1 << (1));
    }
    chkbit<<=1;
    while((*(volatile uint8_t *)((0x32) + 0x20))<63);(*(volatile uint8_t *)((0x32) + 0x20)) = 0;
 }
 (*(volatile uint8_t *)((0x12) + 0x20)) |= (1 << (1));
  while((*(volatile uint8_t *)((0x32) + 0x20))<63);(*(volatile uint8_t *)((0x32) + 0x20)) = 0;

}

void printByte(int16_t val){
  char* chardata = (char*)"0123456789ABCDEF";
  SerialSend(chardata[(val>>12)&0x0F]);
  SerialSend(chardata[(val>>8)&0x0F]);
  SerialSend(chardata[(val>>4)&0x0F]);
  SerialSend(chardata[(val)&0x0F]);
}
void printBin(int16_t val){
  for(int8_t i = 15;i>=0;i--){
    SerialSend('0'+((val>>i)&1));
  }
}
__attribute__((section(".progmem.data"))) prog_uint32_t num10s[] = {
1000000000,
100000000,
10000000,
1000000,
100000,
10000,
1000,
100,
10,
1,
};

void SendInt(int32_t val){
  if(val<0){
  SerialSend('-');
    val = -val;
  }
 uint32_t num = val;
 for(uint8_t idx = 0; idx < 10 ; idx++)
 {
  uint8_t outNum = 0;
  uint32_t CmpNum = (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(num10s + idx)); uint32_t __result; __asm__ ( "lpm %A0, Z+" "\n\t" "lpm %B0, Z+" "\n\t" "lpm %C0, Z+" "\n\t" "lpm %D0, Z" "\n\t" : "=r" (__result), "=z" (__addr16) : "1" (__addr16) ); __result; }));
  for(uint8_t i = 0; i < 10 ; i++)
  {
   if(num>=CmpNum)
   {
    num -= CmpNum;
    outNum++;
   }
   else
   {
    break;
   }
  }
  SerialSend('0' + outNum);
 }
}

uint8_t SerialRead()
{

 uint8_t val = 0;
 (*(volatile uint8_t *)((0x33) + 0x20)) = 1;
 while((*(volatile uint8_t *)((0x10) + 0x20))&(1 << (0))){
 }
 (*(volatile uint8_t *)((0x32) + 0x20)) = 0;
 while((*(volatile uint8_t *)((0x32) + 0x20))<95);(*(volatile uint8_t *)((0x32) + 0x20)) = 0;
 for(uint8_t i = 8 ; i > 0 ; i--)
 {
  val>>=1;val |= ((*(volatile uint8_t *)((0x10) + 0x20))&(1 << (0))?0x80:0);
  while((*(volatile uint8_t *)((0x32) + 0x20))<63);(*(volatile uint8_t *)((0x32) + 0x20)) = 0;
 }

 return val;
}

volatile uint16_t key_data[3];
volatile uint16_t key_value = 0;
volatile uint8_t key_pos = 0;
volatile uint8_t key_idx = 0;
volatile uint8_t key_done = 0;
volatile uint8_t key_count = 0;




extern "C" void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_2 (void){
  (*(volatile uint16_t *)((0x2C) + 0x20)) = 0;
  if((*(volatile uint8_t *)((0x10) + 0x20)) & (1 << (3))){
  }else{

    if((*(volatile uint8_t *)((0x16) + 0x20)) & (1 << (7))){
      key_value |= 1<<(key_count);
    }else{
      key_value |= 0;
    }
    key_count++;
    if(key_count==11){
      key_count = 0;
      uint16_t v = key_value>>1;
      key_data[key_pos] = v;
      key_value = 0;
      key_pos++;
      if((v&0x80)==0){
        key_done = 1;
        key_idx = key_pos;
        key_pos=0;
      }
    }
  }
}


volatile uint16_t mouse_data[5];
volatile uint16_t mouse_value = 0;
volatile uint8_t mouse_pos = 0;
volatile uint8_t mouse_count = 0;
volatile uint8_t mouse_skip = 2;





extern "C" void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; void __vector_1 (void){
  if((*(volatile uint8_t *)((0x10) + 0x20)) & (1 << (2))){
  }else{
    if(mouse_skip){
      mouse_skip--;
    }else{

      if((*(volatile uint8_t *)((0x16) + 0x20)) & (1 << (6))){
        mouse_value |= 1<<(mouse_count);
      }else{
        mouse_value |= 0;
      }
      mouse_count++;
      if(mouse_count==11){
        mouse_count = 0;
        mouse_data[mouse_pos] = (mouse_value>>2)&0xFF;
        mouse_value = 0;
        mouse_pos++;
      }
    }
  }
}




uint8_t clk() {
  return (*(volatile uint8_t *)((0x10) + 0x20)) & (1 << (2));
}
void clkH() {
  (*(volatile uint8_t *)((0x12) + 0x20)) |= (1 << (2));
  (*(volatile uint8_t *)((0x11) + 0x20)) &= ~(1 << (2));
}
void clkL() {
  (*(volatile uint8_t *)((0x12) + 0x20)) &= ~(1 << (2));
  (*(volatile uint8_t *)((0x11) + 0x20)) |= (1 << (2));
}

uint8_t dat() {
  return (*(volatile uint8_t *)((0x16) + 0x20)) & (1 << (6));
}
void datH() {
  (*(volatile uint8_t *)((0x18) + 0x20)) |= (1 << (6));
  (*(volatile uint8_t *)((0x17) + 0x20)) &= ~(1 << (6));
}
void datL() {
  (*(volatile uint8_t *)((0x18) + 0x20)) &= ~(1 << (6));
  (*(volatile uint8_t *)((0x17) + 0x20)) |= (1 << (6));
}


void write(uint16_t data) {
  char i;


  clkH();

  delay(20);
  datL();
  clkL();

  delay(20);
  clkH();


  (*(volatile uint8_t *)((0x33) + 0x20)) = 5;

  for (i=0; i < 9; i++) {
    (*(volatile uint8_t *)((0x32) + 0x20)) = 0;
    while (clk()){
      if((*(volatile uint8_t *)((0x32) + 0x20))>250){
     datH();
        return;
      }
    }
    if (data & 0x01) {
      datH();
    } else {
      datL();
    }

    (*(volatile uint8_t *)((0x32) + 0x20)) = 0;
    while (!clk()){
      if((*(volatile uint8_t *)((0x32) + 0x20))>250){
        datH();
        return;
      }
    }
    data = data >> 1;
  }
  (*(volatile uint8_t *)((0x32) + 0x20)) = 0;
  while ((!clk()) || (!dat())){
    if((*(volatile uint8_t *)((0x32) + 0x20))>250){
      return;
    }
  }
  clkL();
}


int16_t read_movement_x(int16_t status,int16_t x) {

  if ((((status) >> (4)) & 0x01)) {
    for(uint8_t i = 8; i < 16; ++i) {
      x |= (1<<i);
    }
  }
  return x;
}

int16_t read_movement_y(int16_t status,int16_t y) {

  if ((((status) >> (5)) & 0x01)) {
    for(uint8_t i = 8; i < 16; ++i) {
      y |= (1<<i);
    }
  }
  return y;
}
# 342 "blink.cpp"
uint8_t SendByte(uint8_t data){
  uint8_t p = 0;
  for(uint8_t i=0;i<8;i++)
  {
    delay(1);
    if(data&1)
    {
      (*(volatile uint8_t *)((0x14) + 0x20)) |= (1 << (5));
      p = p ^ 1;
    }
    else
    {
      (*(volatile uint8_t *)((0x14) + 0x20)) &= ~(1 << (5));
    }
    delay(1);
    data>>=1;
    (*(volatile uint8_t *)((0x14) + 0x20)) |= (1 << (4));
    delay(1);
    (*(volatile uint8_t *)((0x14) + 0x20)) &= ~(1 << (4));
  }
  return p;
}

int main()
{
# 378 "blink.cpp"
 TimerInit();
 SerialInit();
  (*(volatile uint8_t *)((0x35) + 0x20)) |= (1 << (0));
  (*(volatile uint8_t *)((0x3B) + 0x20)) |= (1 << (6));
  (*(volatile uint8_t *)((0x35) + 0x20)) |= (1 << (2));
  (*(volatile uint8_t *)((0x3B) + 0x20)) |= (1 << (7));
  (*(volatile uint8_t *)((0x14) + 0x20)) &= ~(1 << (5));
  (*(volatile uint8_t *)((0x14) + 0x20)) &= ~(1 << (4));
  (*(volatile uint8_t *)((0x14) + 0x20)) &= ~(1 << (3));
  (*(volatile uint8_t *)((0x15) + 0x20)) &= ~(1 << (5));
  (*(volatile uint8_t *)((0x15) + 0x20)) &= ~(1 << (4));
  (*(volatile uint8_t *)((0x15) + 0x20)) &= ~(1 << (3));
  (*(volatile uint8_t *)((0x2E) + 0x20)) = 3;

  __asm__ __volatile__ ("sei" ::);

  uint8_t serialOut = 0;
  uint16_t old_mouse_data1 = 0;

  if(serialOut){
    SerialSend('h');
    SerialSend('e');
    SerialSend('l');
    SerialSend('l');
    SerialSend('o');
    SerialSend('\r');
    SerialSend('\n');
  }
  while(1){


    int16_t data[5];
    (*(volatile uint8_t *)((0x3B) + 0x20)) &=~(1 << (6));
    write(0x01EB);
    mouse_value = 0;
    mouse_pos = 0;
    mouse_count = 0;
    mouse_skip = 1;
    clkH();
    (*(volatile uint8_t *)((0x3B) + 0x20)) |= (1 << (6));

    if((*(volatile uint16_t *)((0x2C) + 0x20))>10000){
      key_count = 0;
      key_value = 0;
      key_pos=0;
    }

    (*(volatile uint8_t *)((0x33) + 0x20)) = 1;
    for(uint16_t i = 0 ; i < 500; i++){
      (*(volatile uint8_t *)((0x32) + 0x20)) = 0;
      while((*(volatile uint8_t *)((0x32) + 0x20))<(80)){

        if(key_done == 1){
          if(serialOut){
            SerialSend(' '); printByte(key_data[0]);
            SerialSend(' '); printByte(key_data[1]);
            SerialSend(' '); printByte(key_data[2]);

            SerialSend(' '); printBin(key_data[0]);
            SerialSend(' '); printBin(key_data[1]);
            SerialSend(' '); printBin(key_data[2]);
            SerialSend(' ');
          }else{
            uint8_t p = 0;
            p = p ^ SendByte(key_data[key_idx-1]);
            p = p ^ SendByte(key_data[key_idx-2]);
            p = p ^ SendByte(key_data[key_idx-3]);
            p = p ^ 1;
            SendByte((p<<4)|1);
            delay(1);
            (*(volatile uint8_t *)((0x14) + 0x20)) |= (1 << (3)) ;
            delay(1);
            (*(volatile uint8_t *)((0x14) + 0x20)) &= ~(1 << (3));

          }
          key_done = 0;
          key_data[0] = 0;
          key_data[1] = 0;
          key_data[2] = 0;
        }
      }
    }
    int16_t x = read_movement_x(mouse_data[1],mouse_data[2]);
    int16_t y = read_movement_y(mouse_data[1],mouse_data[3]);

    uint8_t btnChange = old_mouse_data1 != mouse_data[1];
    old_mouse_data1 = mouse_data[1];

    if(btnChange || mouse_data[2] || mouse_data[3]){

      if(serialOut){
        SerialSend('\r');
        SerialSend('\n');

        SerialSend(' '); printByte(mouse_data[0]);
        SerialSend(' '); printByte(mouse_data[1]);
        SerialSend(' '); printByte(mouse_data[2]);
        SerialSend(' '); printByte(mouse_data[3]);
        SerialSend(' '); printByte(mouse_data[4]);

        SerialSend(' '); printBin(mouse_data[0]);
        SerialSend(' '); printBin(mouse_data[1]);
        SerialSend(' '); printBin(mouse_data[2]);
        SerialSend(' '); printBin(mouse_data[3]);
        SerialSend(' '); printBin(mouse_data[4]);
        SerialSend(' ');
        SendInt(x);
        SerialSend(',');
        SendInt(y);
      }else{
        uint8_t p = 0;
        p = p ^ SendByte(x);
        p = p ^ SendByte(y);
        p = p ^ SendByte(mouse_data[1]);
        SendByte((p<<4) | 0);
        delay(1);
        (*(volatile uint8_t *)((0x14) + 0x20)) |= (1 << (3)) ;
        delay(1);
        (*(volatile uint8_t *)((0x14) + 0x20)) &= ~(1 << (3));
      }

    }
  }

 return 0;
}
